---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rh-sign-image-cosign
  labels:
    app.kubernetes.io/version: "1.3.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Task to sign container images in snapshot by cosign
  params:
    - name: snapshotPath
      description: Path to the JSON string of the mapped Snapshot spec in the data workspace
      type: string
    - name: secretName
      description: Name of secret containing needed credentials
      type: string
    - name: signRegistryAccessPath
      type: string
      description: |
        The relative path in the workspace to a text file that contains a list of repositories
        that needs registry.access.redhat.com image references to be signed (i.e.
        requires_terms=true), one repository string per line, e.g. "rhtas/cosign-rhel9".
    - name: retries
      description: Retry cosign N times.
      type: string
      default: "3"
    - name: concurrentLimit
      type: string
      default: 5
      description: The maximum number of concurrent cosign signing jobs
  workspaces:
    - name: data
      description: Workspace to read and save files
  steps:
    - name: sign-image
      image: quay.io/konflux-ci/release-service-utils:70be98cc78c9ef52526c4f2be437321aa943b516
      env:
        - name: AWS_DEFAULT_REGION
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_DEFAULT_REGION
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: AWS_SECRET_ACCESS_KEY
        - name: SIGN_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: SIGN_KEY
        - name: REKOR_URL
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: REKOR_URL
              optional: true
        - name: PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: PUBLIC_KEY
        - name: REKOR_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.secretName)
              key: REKOR_PUBLIC_KEY
      script: |
        #!/usr/bin/env bash
        set -eux

        SNAPSHOT_PATH=$(workspaces.data.path)/$(params.snapshotPath)
        COMPONENTS_LENGTH=$(jq '.components |length' "${SNAPSHOT_PATH}")

        SIGN_REGISTRY_ACCESS_FILE=$(workspaces.data.path)/$(params.signRegistryAccessPath)
        if [ ! -f "${SIGN_REGISTRY_ACCESS_FILE}" ] ; then
            echo "No valid file was provided as signRegistryAccessPath."
            exit 1
        fi
        PUBLIC_KEY_FILE=$(mktemp)
        echo -n "$PUBLIC_KEY" > "$PUBLIC_KEY_FILE"

        RUNNING_JOBS="\j" # Bash parameter for number of jobs currently running

        jobpid(){
            pid=$(cut -d' ' -f4 < /proc/self/stat)
            echo "$pid"
        }
        echopid(){
            pid=$(jobpid)
            echo "${pid}: $*"
        }
        run_cosign () { # Expected arguments are [digest_reference, tag_reference]
            attempt=0
            backoff1=2
            backoff2=3
            until [ "$attempt" -gt "$(params.retries)" ] ; do # 3 retries by default
                cosign "$@" && break
                sleep $backoff2

                # Fibbonaci backoff
                old_backoff1=$backoff1
                backoff1=$backoff2
                backoff2=$((old_backoff1 + backoff2))
                attempt=$((attempt+1))
            done
            if [ "$attempt" -gt "$(params.retries)" ] ; then
              echopid "Max retries exceeded."
              exit 1
            fi
        }
        function check_existing_signatures() {
          local identity=$1
          local reference=$2
          local digest=$3
          if [ -v REKOR_URL ]; then
              COSIGN_REKOR_ARGS="--rekor-url=$REKOR_URL"
              REKOR_PUBLIC_KEY_FILE=$(mktemp)
              echo -n "$REKOR_PUBLIC_KEY" > "$REKOR_PUBLIC_KEY_FILE"
              export SIGSTORE_REKOR_PUBLIC_KEY="$REKOR_PUBLIC_KEY_FILE"
          else
              COSIGN_REKOR_ARGS="--insecure-ignore-tlog=true"
          fi
          verify_output=$(run_cosign verify "${COSIGN_REKOR_ARGS[@]}" --key "$PUBLIC_KEY_FILE" "$reference")
          found_signatures=$(echo "$verify_output" | jq -j '['\
        '.[]|select(.critical.image."docker-manifest-digest"| contains("'"$digest"'"))'\
        '|select(.critical.identity."docker-reference"| contains("'"$identity"'"))'\
        ']|length')
          echo "$found_signatures"
        }
        function check_and_sign() {
          local identity=$1
          local reference=$2
          local tag=$3
          local digest=$4
          found_signatures=$(check_existing_signatures "$identity" "$reference:$tag" "$digest")
          if [ -z "$found_signatures" ]; then
            found_signatures=0
          fi
          echopid "FOUND SIGNATURES for ${identity} ${digest}: $found_signatures"

          if [ -v REKOR_URL ]; then
              COSIGN_REKOR_ARGS="-y --rekor-url=$REKOR_URL"
              REKOR_PUBLIC_KEY_FILE=$(mktemp)
              echo -n "$REKOR_PUBLIC_KEY" > "$REKOR_PUBLIC_KEY_FILE"
              export SIGSTORE_REKOR_PUBLIC_KEY="$REKOR_PUBLIC_KEY_FILE"
          else
              COSIGN_REKOR_ARGS="--tlog-upload=false"
          fi

          if [ "$found_signatures" -eq 0 ]; then
            run_cosign -t 3m0s sign "${COSIGN_REKOR_ARGS[@]}" \
              --key "$SIGN_KEY" \
              --sign-container-identity "$identity" "$reference@$digest"
          else
            echopid "Skip signing ${identity} (${digest})"
          fi
        }

        for (( COMPONENTS_INDEX=0; COMPONENTS_INDEX<COMPONENTS_LENGTH; COMPONENTS_INDEX++ )); do
            COMPONENT_NAME=$(jq -r ".components[${COMPONENTS_INDEX}].name" "${SNAPSHOT_PATH}")
            echo "Processing component ${COMPONENT_NAME}"

            # Get public image references
            INTERNAL_CONTAINER_REF=$(jq -r ".components[${COMPONENTS_INDEX}].repository" "${SNAPSHOT_PATH}")
            rh_registry_repo=$(jq -r ".components[${COMPONENTS_INDEX}][\"rh-registry-repo\"]" "${SNAPSHOT_PATH}")
            registry_access_repo=$(jq -r ".components[${COMPONENTS_INDEX}][\"registry-access-repo\"]" \
              "${SNAPSHOT_PATH}")
            repository="${rh_registry_repo#*/}"

            # Sign rh-registry-repo references (always) and registry-access-repo references
            # (only if signatures for this registry are required)
            REGISTRY_REFERENCES=("${rh_registry_repo}")
            if grep -q "^${repository}$" "${SIGN_REGISTRY_ACCESS_FILE}"; then
              REGISTRY_REFERENCES+=("${registry_access_repo}")
            fi

            # Check if image is manifest list
            BUILD_CONTAINER_IMAGE=$(jq -r ".components[${COMPONENTS_INDEX}].containerImage" "${SNAPSHOT_PATH}")
            DIGEST="${BUILD_CONTAINER_IMAGE/*@}"
            IMAGE=$(skopeo inspect --raw "docker://${BUILD_CONTAINER_IMAGE}")
            MEDIA_TYPE=$(echo "$IMAGE" | jq -r '.mediaType')
            TAGS=$(jq -r ".components[${COMPONENTS_INDEX}].tags|.[]" "${SNAPSHOT_PATH}")
            LIST=0
            if [ "$MEDIA_TYPE" = "application/vnd.docker.distribution.manifest.list.v2+json" ]; then LIST=1; fi
            if [ "$MEDIA_TYPE" = "application/vnd.oci.image.index.v1+json" ]; then LIST=1; fi

            # Sign each manifest in manifest list
            if [ $LIST -eq 1 ]; then
                for REGISTRY_REF in "${REGISTRY_REFERENCES[@]}"; do
                    for MDIGEST in $(echo "$IMAGE" | jq -r '.manifests[]|.digest'); do
                        for TAG in $TAGS; do
                            while (( ${RUNNING_JOBS@P} >= $(params.concurrentLimit) )); do
                                wait -n
                            done
                            check_and_sign "${REGISTRY_REF}:${TAG}" "${INTERNAL_CONTAINER_REF}" "${TAG}" "${MDIGEST}" &
                        done
                    done
                done
            fi

            # Sign manifest list itself or manifest if it's not list
            for REGISTRY_REF in "${REGISTRY_REFERENCES[@]}"; do
                for TAG in $TAGS; do
                    while (( ${RUNNING_JOBS@P} >= $(params.concurrentLimit) )); do
                        wait -n
                    done
                    check_and_sign "${REGISTRY_REF}:${TAG}" "${INTERNAL_CONTAINER_REF}" "${TAG}" "${DIGEST}" &
                done
            done
        done
        while (( ${RUNNING_JOBS@P} > 0 )); do
            wait -n
        done
        echo "done"
