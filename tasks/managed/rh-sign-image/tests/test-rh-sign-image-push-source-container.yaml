---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-rh-sign-image-push-source-container
spec:
  description: |
    Test creating an internal request to sign an image with the pushSourceContainer
    values set in the mapping and components. This also tests a combination of some repos
    requiring registry.access* signatures and others not requiring them.
  workspaces:
    - name: tests-workspace
  tasks:
    - name: setup
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        workspaces:
          - name: data
        steps:
          - name: setup-values
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              cat > "$(workspaces.data.path)/snapshot_spec.json" << EOF
              {
                "application": "myapp",
                "components": [
                  {
                    "name": "comp0",
                    "source": {
                      "git": {
                        "revision": "deadbeef"
                      }
                    },
                    "containerImage": "registry.io/image0@sha256:0000",
                    "repository": "quay.io/redhat-prod/myproduct0----myrepo0",
                    "rh-registry-repo": "registry.redhat.io/myproduct0/myrepo0",
                    "registry-access-repo": "registry.access.redhat.com/myproduct0/myrepo0",
                    "pushSourceContainer": true,
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  },
                  {
                    "name": "comp1",
                    "source": {
                      "git": {
                        "revision": "alivebeef"
                      }
                    },
                    "containerImage": "registry.io/image1@sha256:1111",
                    "repository": "quay.io/redhat-prod/myproduct1----myrepo1",
                    "rh-registry-repo": "registry.redhat.io/myproduct1/myrepo1",
                    "registry-access-repo": "registry.access.redhat.com/myproduct1/myrepo1",
                    "pushSourceContainer": false,
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  },
                  {
                    "name": "comp2",
                    "source": {
                      "git": {
                        "revision": "deaderbeef"
                      }
                    },
                    "containerImage": "registry.io/image2@sha256:2222",
                    "repository": "quay.io/redhat-prod/myproduct2----myrepo2",
                    "rh-registry-repo": "registry.redhat.io/myproduct2/myrepo2",
                    "registry-access-repo": "registry.access.redhat.com/myproduct2/myrepo2",
                    "tags": [
                      "some-prefix-12345",
                      "some-prefix"
                    ]
                  }
                ]
              }
              EOF

              cat > "$(workspaces.data.path)/data.json" << EOF
              {
                "mapping": {
                  "defaults": {
                    "pushSourceContainer": "true"
                  }
                },
                "sign": {
                  "configMapName": "signing-config-map"
                }
              }
              EOF
              cat > "$(workspaces.data.path)/release_plan_admission.json" << EOF
              {
                "spec": {
                  "pipeline": {
                    "pipelineRef": {
                      "resolver": "git",
                      "params": [
                        {
                          "name": "url",
                          "value": "https://localhost.git"
                        },
                        {
                          "name": "revision",
                          "value": "main"
                        },
                        {
                          "name": "pathInRepo",
                          "value": "pipelines/abc/abc.yaml"
                        }
                      ]
                    },
                    "serviceAccountName": "release-service-account"
                  }
                }
              }
              EOF

              cat > "$(workspaces.data.path)/signRegistryAccess.txt" << EOF
              myproduct0/myrepo0
              myproduct1/myrepo1
              EOF
    - name: run-task
      taskRef:
        name: rh-sign-image
      params:
        - name: requester
          value: testuser-single
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: snapshot_spec.json
        - name: dataPath
          value: data.json
        - name: releasePlanAdmissionPath
          value: release_plan_admission.json
        - name: pyxisSecret
          value: test-create-pyxis-image-cert
        - name: taskGitUrl
          value: "http://localhost"
        - name: taskGitRevision
          value: "main"
        - name: signRegistryAccessPath
          value: signRegistryAccess.txt
      workspaces:
        - name: data
          workspace: tests-workspace
      runAfter:
        - setup
    - name: check-result
      workspaces:
        - name: data
          workspace: tests-workspace
      taskSpec:
        steps:
          - name: check-result
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              # There should be 8 IRs for the first component (two tags * one for
              # registry.access.redhat.com and one for registry.redhat.io, * one for the image, one for
              # the source image), 4 for the second component (same 4 as above but only half as
              # pushSourceContainer is false), and 4 for the final (same 4 as first component,
              # but only half as registry.access.redhat.com signatures are not required).

              internalRequests="$(kubectl get internalrequest -o json --sort-by=.metadata.creationTimestamp | jq -c)"
              irsLength=$(jq ".items | length" <<< "${internalRequests}" )

              expectedReferences=()
              for((i=0; i<3; i++)); do
                expectedReferences+=("registry.redhat.io/myproduct${i}/myrepo${i}:some-prefix-12345")
                expectedReferences+=("registry.redhat.io/myproduct${i}/myrepo${i}:some-prefix")
                if [ "${i}" != "2" ] ; then
                  expectedReferences+=("registry.access.redhat.com/myproduct${i}/myrepo${i}:some-prefix-12345")
                  expectedReferences+=("registry.access.redhat.com/myproduct${i}/myrepo${i}:some-prefix")
                fi
                if [ "${i}" != "1" ] ; then
                  expectedReferences+=("registry.redhat.io/myproduct${i}/myrepo${i}:some-prefix-12345-source")
                  expectedReferences+=("registry.redhat.io/myproduct${i}/myrepo${i}:some-prefix-source")
                  if [ "${i}" != "2" ] ; then
                    expectedReferences+=("registry.access.redhat.com/myproduct${i}/myrepo${i}:some-prefix-12345-source")
                    expectedReferences+=("registry.access.redhat.com/myproduct${i}/myrepo${i}:some-prefix-source")
                  fi
                fi
              done
              foundReferences=()
              for((ir=0; ir<irsLength; ir++)); do
                params=$(jq -r ".items[$ir].spec.params" <<< "${internalRequests}")
                refsValue=$(jq -r '.references' <<< "${params}")
                for ref in $refsValue; do
                  foundReferences+=("${ref}")
                done
              done

              echo "${foundReferences[@]}" | tr ' ' '\n' | sort > /tmp/found
              echo "${expectedReferences[@]}"  | tr ' ' '\n' | sort > /tmp/expected
              cat /tmp/expected
              diff -Naur /tmp/found /tmp/expected

              differenceReferences=$(echo "${expectedReferences[@]}" "${foundReferences[@]}" | tr ' ' '\n' \
                | sort | uniq -u)

              if [ -n "${differenceReferences}" ] ; then
                echo "error: references expected compared to found do not match"
                echo ""
                echo "${differenceReferences}"
                exit 1
              fi
      runAfter:
        - run-task
  finally:
    - name: cleanup
      taskSpec:
        steps:
          - name: delete-crs
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            script: |
              #!/usr/bin/env bash
              set -eux

              kubectl delete internalrequests --all
