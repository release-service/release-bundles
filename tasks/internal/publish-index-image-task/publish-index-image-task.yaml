---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: publish-index-image-task
  labels:
    app.kubernetes.io/version: "0.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
      Task to publish a built FBC index image using skopeo
  params:
    - name: sourceIndex
      type: string
      description: sourceIndex signing image
    - name: targetIndex
      type: string
      description: targetIndex signing image
    - name: retries
      type: string
      default: "0"
      description: Number of skopeo retries
    - name: publishingCredentials
      type: string
      default: "fbc-publishing-credentials"
      description: The credentials used to access the registries
    - name: requestUpdateTimeout
      type: string
      default: "360"
      description: Max seconds waiting for the status update
  results:
    - name: requestMessage
  steps:
    - name: publish-index-image
      env:
        - name: SOURCE_INDEX_CREDENTIAL
          valueFrom:
            secretKeyRef:
              key: sourceIndexCredential
              name: $(params.publishingCredentials)
        - name: TARGET_INDEX_CREDENTIAL
          valueFrom:
            secretKeyRef:
              key: targetIndexCredential
              name: $(params.publishingCredentials)
      image: >-
        quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        PATH=/bin:/usr/bin:/usr/local/bin
        export PATH

        SOURCE_AUTH_ARGS=()
        if [[ ! "$(params.sourceIndex)" =~ ^registry-proxy(\-stage)?.engineering.redhat.com ]]; then
            SOURCE_AUTH_ARGS=("--src-creds" "${SOURCE_INDEX_CREDENTIAL}")
        fi

        TARGET_AUTH_ARGS=("--dest-creds" "${TARGET_INDEX_CREDENTIAL}")

        # Extract digest from pull spec
        SOURCE_INDEX="$(params.sourceIndex)"
        SOURCE_DIGEST="${SOURCE_INDEX##*@}"

        echo "Getting target image digest: $(params.targetIndex)"
        if TARGET_DIGEST=$(skopeo inspect \
            "${TARGET_AUTH_ARGS[@]}" \
            "docker://$(params.targetIndex)" \
            --format '{{.Digest}}'); then
            echo "Target image exists."
            echo "DEBUG: Source Digest - $SOURCE_DIGEST"
            echo "DEBUG: Target Digest - $TARGET_DIGEST"
            if [ "$SOURCE_DIGEST" == "$TARGET_DIGEST" ]; then
                echo "Image already exists with the same digest, skipping copy." | tee "$(results.requestMessage.path)"
                exit 0
            else
                echo "Image exists in target registry but digests do not match." \
                    "Proceeding to copy the image."
            fi
        else
            echo "Target image does not exist. Proceeding to copy the image."
        fi

        # Proceed with copying the image
        echo "Copying image from $(params.sourceIndex) to $(params.targetIndex)"
        (skopeo copy \
        --all \
        --preserve-digests \
        --retry-times "$(params.retries)" \
        --src-tls-verify=false "${SOURCE_AUTH_ARGS[@]}" \
        "docker://$(params.sourceIndex)" \
        "${TARGET_AUTH_ARGS[@]}" \
        "docker://$(params.targetIndex)" && \
        echo -n "Index Image Published successfully" || \
        echo -n "Failed publishing Index Image" ) | tee "$(results.requestMessage.path)"

        # Ensure the script exits with the correct status
        grep "success" "$(results.requestMessage.path)" >/dev/null
